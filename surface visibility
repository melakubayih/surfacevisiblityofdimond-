#include <GL/glut.h>
#include <bevgrafmath2017.h>
#include <math.h>

GLsizei winWidth = 800, winHeight = 600;
GLint keyStates[256];
float s = 5;

mat4 w2v, rotatedX, rotatedY, rotatedZ, scaled, projection, wt;

float alpha = pi()/4;
float beta = pi()/5;
float gamma_ = 0;

int orthogonalMode = 1;

struct face {
	vec3 p[3];
	vec3 m[3];
	vec3 normal;
};
face dimond[8] = {};
face tetrahedronFaces[4] = {};

void setNormalVectors() {
	for (int i = 0; i < 4; i++)
		tetrahedronFaces[i].normal = cross(tetrahedronFaces[i].p[1] - tetrahedronFaces[i].p[0], tetrahedronFaces[i].p[2] - tetrahedronFaces[i].p[0]);
	for (int i = 0; i < 8; i++)
		dimond[i].normal = cross(dimond[i].m[1] - dimond[i].m[0], dimond[i].m[2] - dimond[i].m[0]);

}

void initCube() {

	float tr = 2 * sin(2 * pi() / 3);
	// calculate original tr points
	//bottom face red
	tetrahedronFaces[0].p[2] = {2.0,0.0,-0.5};
	tetrahedronFaces[0].p[0] = { -1.0,-tr,-0.5 };
	tetrahedronFaces[0].p[1] = { -1.0,tr,-0.5 };

	//front green
	tetrahedronFaces[1].p[2] = { 2.0,0.0,-0.5 };
	tetrahedronFaces[1].p[1] = { 0.0,0.0,2.0 };
	tetrahedronFaces[1].p[0] = { -1.0,tr,-0.5 };
	//left purple
	tetrahedronFaces[2].p[1] = { -1.0,tr,-0.5 };
	tetrahedronFaces[2].p[2] = { -1.0,-tr,-0.5 };
	tetrahedronFaces[2].p[0] = { 0.0,0.0,2.0 };
	//back blue
	tetrahedronFaces[3].p[1] = { 2.0,0.0,0-0.5};
	tetrahedronFaces[3].p[2] = { 0.0,0.0,2.0 };
	tetrahedronFaces[3].p[0] = { -1.0,-tr,-0.5 };
	//front-top
	dimond[0].m[1] = {-0.5,-0.5,0.0};
	dimond[0].m[2] = { 0.5,-0.5,0.0 };
	dimond[0].m[0] = { 0.0,0.0,2.0 };

	//fron-bottom
	dimond[1].m[0] = { -0.5,-0.5,0.0 };
	dimond[1].m[1] = { 0.0,0.0,-2.0 };
	dimond[1].m[2] = { 0.5,-0.5,0.0 };
	
	//back-top 
	dimond[2].m[1] = { 0.5,0.5,0.0 };
	dimond[2].m[0] = { 0.0,0.0,2.0 };
	dimond[2].m[2] = { -0.5,0.5,0.0 };

	//back-bottom
	dimond[3].m[2] = { 0.5,0.5,0.0 };
	dimond[3].m[0] = { 0.0,0.0,-2.0 };
	dimond[3].m[1] = { -0.5,0.5,0.0 };
	//left-top
	dimond[4].m[0] = { -0.5,0.5,0.0 };
	dimond[4].m[2] = { 0.0,0.0,2.0 };
	dimond[4].m[1] = { -0.5,-0.5,0.0 };
	//left-bottom
	dimond[5].m[0] = { -0.5,0.5,0.0 };
	dimond[5].m[2] = { -0.5,-0.5,0.0 };
	dimond[5].m[1] = { 0.0,0.0,-2.0 };
	//right-top
	dimond[6].m[0] = { 0.5,0.5,0.0 };
	dimond[6].m[2] = { 0.5,-0.5,0.0 };
	dimond[6].m[1] = { 0.0,0.0,2.0 };
	//right-bottom
	dimond[7].m[0] = { 0.5,0.5,0.0 };
	dimond[7].m[2] = { 0.0,0.0,-2.0 };
	dimond[7].m[1] = { 0.5,-0.5,0.0 };
	setNormalVectors();
}
void initMatrices() {
	scaled = scale(vec3(0.0, 0.0, 5.0));

	vec2 windowSize = { 6, 6 };
	vec2 windowPosition = { -3, -3 };

	vec2 viewportSize = { 200, 200 };
	vec2 viewportPosition = { 150, winHeight / 2 - viewportSize.y / 2 };
	w2v = windowToViewport3(windowPosition, windowSize, viewportPosition, viewportSize);
	vec2 view = { 350 , winHeight / 2 - viewportSize.y / 2 };
	wt = windowToViewport3(windowPosition, windowSize, view, viewportSize);

}


void init() {
	glClearColor(1.0, 1.0, 1.0, 0.0);
	glMatrixMode(GL_PROJECTION);
	gluOrtho2D(0.0, winWidth, 0.0, winHeight);
	glShadeModel(GL_FLAT);
	glEnable(GL_POINT_SMOOTH);
	glPointSize(5.0);
	glLineWidth(1.0);

	initCube();
	initMatrices();
}

void setColor(int i) {
	switch (i) {
	case 0:
		glColor3f(0.8, 0.0, 0.0);
		break;
	case 1:
		glColor3f(0.0, 0.8, 0.2);
		break;
	case 2:
		glColor3f(0.8, 0.2, 0.9);
		break;
	case 3:
		glColor3f(0.0, 0.2, 0.9);
		break;
	case 4:
		glColor3f(0.3, 0.2, 0.9);
		break;
	case 5:
		glColor3f(0.8, 0.2, 0.0);
		break;
	case 6:
		glColor3f(0.4, 0.0, 0.3);
		break;
	case 7:
		glColor3f(0.9, 0.9, 0.0);
		break;

	default:
		glColor3f(0, 0, 0);
	}
}

void drawFaces() {

	glColor3f(0, 0, 0);
	vec3 d1 = { -2.0, 0.0, 0.0 };
	mat4 trans = translate(d1);

	mat4 rotation = rotateZ(gamma_) * rotateY(beta) * rotateX(alpha);
	if (orthogonalMode) {
		projection = ortho();
	}
	else {
		projection = perspective(s);
	}

	mat4 M = w2v * trans * projection * rotation * trans;

	for (int idx = 0; idx < 4; idx++) {

		face f = tetrahedronFaces[idx];

		vec4 normalH = ihToH(f.normal);
		vec3 rotatedNormal = hToIh(rotation * normalH);

		bool condition = 0;
		if (orthogonalMode) {
			condition = rotatedNormal.z > 0.0;
		}
		else {
			vec4 facePointH = ihToH(f.p[0]);
			vec4 rotatedPoint = rotation * facePointH;
			condition = dot((vec3(0, 0, s) - hToIh(rotatedPoint)), rotatedNormal) > 0;
		}

		if (condition) {

			glBegin(GL_POLYGON);
			for (int i = 0; i < 3; i++) {

				setColor(idx);

				vec4 pointH = ihToH(f.p[i]);
				vec4 transformedPoint = M * pointH;

				if (transformedPoint.w != 0) {
					vec3 result = hToIh(transformedPoint);
					if (result.z == 0) {
						glVertex2f(result.x, result.y);
					}
				}

			}
			glEnd();

		}

	}

}

void dimondFaces() {

	glColor3f(0, 0, 0);
	vec3 d2 = { 2.0, 0.0, 0.0 };
	mat4 trans = translate(d2);

	mat4 rotation = rotateZ(gamma_) * rotateY(beta) * rotateX(alpha);
	if (orthogonalMode) {
		projection = ortho();
	}
	else {
		projection = perspective(s);
	}

	mat4 M = wt * trans * projection * rotation * trans;

	for (int idx = 0; idx < 8; idx++) {

		face f = dimond[idx];

		vec4 normalH = ihToH(f.normal);
		vec3 rotatedNormal = hToIh(rotation * normalH);

		bool condition = 0;
		if (orthogonalMode) {
			condition = rotatedNormal.z > 0.0;
		}
		else {
			vec4 facePointH = ihToH(f.m[0]);
			vec4 rotatedPoint = rotation * facePointH;
			condition = dot((vec3(0, 0, s) - hToIh(rotatedPoint)), rotatedNormal) > 0;
		}

		if (condition) {

			glBegin(GL_POLYGON);
			for (int i = 0; i < 3; i++) {

				setColor(idx);

				vec4 pointH = ihToH(f.m[i]);
				vec4 transformedPoint = M * pointH;

				if (transformedPoint.w != 0) {
					vec3 result = hToIh(transformedPoint);
					if (result.z == 0) {
						glVertex2f(result.x, result.y);
					}
				}

			}
			glEnd();

		}

	}

}

void display() {
	glClear(GL_COLOR_BUFFER_BIT);

	glColor3f(0, 0, 0);

	drawFaces();
	dimondFaces();
	glutSwapBuffers();
}

void keyPressed(unsigned char key, int x, int y)
{
	keyStates[key] = 1;

	if (key == '1') // orthogonal
		orthogonalMode = 1;
	else if (key == '2') // cehtral
		orthogonalMode = 0;

}

void keyUp(unsigned char key, int x, int y)
{
	keyStates[key] = 0;
}

void keyOperations(int value)
{
	if (keyStates['w']) { beta += 0.01; }
	if (keyStates['s']) { beta -= 0.01; }

	if (keyStates['q']) { alpha += 0.01; }
	if (keyStates['a']) { alpha -= 0.01; }

	if (keyStates['e']) { gamma_ += 0.01; }
	if (keyStates['d']) { gamma_ -= 0.01; }


	glutPostRedisplay();

	glutTimerFunc(5, keyOperations, 0);
}


int main(int argc, char** argv) {
	glutInit(&argc, argv);
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
	glutInitWindowSize(winWidth, winHeight);
	glutInitWindowPosition(100, 100);
	glutCreateWindow("Computer Graphics");

	init();
	glutDisplayFunc(display);
	glutKeyboardFunc(keyPressed);
	glutKeyboardUpFunc(keyUp);
	glutTimerFunc(5, keyOperations, 0);


	glutMainLoop();
	return 0;
}
